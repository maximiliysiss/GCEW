@{
    ViewData["Title"] = "Home Page";
    var templatesSite = SiteTemplate<TemplateSite>.Instance();
    IViewRenderService viewRender = ViewBag.RenderEngine;
    ProjectConfiguration projectConfiguration = ViewBag.ProjectConfiguration;
}
@model Project


<style>

    .context-menu-container {
        display: block;
    }

    line {
        background-image: url("~/images/arrows.png");
        background-repeat: repeat;
    }

    .st0 {
    }

    line:hover {
        cursor: pointer;
    }

    .badge {
        display: none;
    }

    .panel-compiler {
        height: 34px;
        padding-right: 20px;
        margin: 5px;
        display: flex;
        flex-direction: row-reverse;
    }

        .panel-compiler > button {
            margin-left: 10px;
            font-weight: bold;
        }
</style>
<div class="window">
    <div class="menu">
        @Html.Raw(Html.MenuContainerHtml())
    </div>
    <div class="panel-compiler">
        <button onclick="compileProject(event)" class="btn btn-success">Compile</button>
        <button class="btn btn-warning">Build</button>
    </div>


    @Html.Raw(Html.GenerateContextMenus())

    <div class="window-in">
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
<script src="~/lib/jquery-ui-1.12.1.custom/jquery-ui.js"></script>
<script src="~/js/context-menu-custom.js"></script>
<script src="~/lib/toastr/toastr.js"></script>
<script src="https://unpkg.com/micromodal/dist/micromodal.min.js"></script>
<script src="~/lib/patternfly-bootstrap-treeview-master/src/js/bootstrap-treeview.js"></script>
<script src="~/js/custom-modal-window.js"></script>
<script type="text/javascript" src="//golden-layout.com/files/latest/js/goldenlayout.min.js"></script>
<script src="~/lib/leader-line-master/leader-line.min.js"></script>
<script src="~/js/net-connection.js"></script>
<script src="~/js/utilities-engine.js"></script>
<script src="~/js/model-engine.js"></script>
<script src="~/js/flowchart-engine.js"></script>
<script src="~/js/filesystem-engine.js"></script>
<script>

    var tree;
    var dockLayouts;
    var enginesFlowChart = [];
    var actualEngine;

    urlFileSystems = {
        "OpenFile":"@Url.Action("OpenFile", "Project")",
        "DeleteFile":"@Url.Action("DeleteFile", "Project")",
        "CreateFileInFolder":"@Url.Action("CreateFileInFolder", "Project")",
        "AddNewFolder":"@Url.Action("AddNewFolder", "Project")",
        "DeleteFolder":"@Url.Action("DeleteFolder", "Project")"
    };

    var types = {
        @Html.Raw(string.Join(",", projectConfiguration.CarouselTypes["Common"].Select(x => $@"""{x.Value}"":{((int)(x.Key)).ToString()}")))
    };

    url = '@Url.Action("Constructor", "CreateNewElement")';

    $('.create-element-class').click(function (event) {
        alert('r');
    });

    function updateProjectTree() {
        ajaxPost("@Url.Action("ProjectTree", "Project")", { id: @Model.ID}, function (data) {
            var options = {
                data: JSON.parse(data),
            };

            var tree = $('#tree-solution').treeview(options);
            treeCreator(tree);
        });
    }

    $(document).on('keydown', function (e) {
        if (e.ctrlKey && e.which === 83) { // Check for the Ctrl key being pressed, and if the key = [S] (83)

            e.preventDefault();
            return false;
        }
    });

    function treeCreator(tree) {
        $(tree).on("rendered", function (e, n) {
            var size = Object.getOwnPropertyNames(n).length;
            for (var i = 0; i < size; i++) {
                var tagNumber = "[data-nodeid*='" + n[i].nodeId + "']";
                n[i].tags.forEach(function (tag) {
                    switch (tag) {
                        case "folder":
                            $(tagNumber).attr("menu", "MenuFolder");
                            break;
                        case "file":
                            $(tagNumber).attr("menu", "MenuFile");
                            break;
                    }
                });
                if (!$(tagNumber).attr("menu"))
                    $(tagNumber).attr("menu", "MenuFileRoot");
                var path = n[i].tags[1];
                $(tagNumber).attr("path", path);
                if ($(tagNumber).attr("menu") === "MenuFile") {
                    $(tagNumber).click(function () {
                        openFile($(this).attr("path"));
                    });
                }
            }

            reHandlerContextMenus();
        });
    }

    // List of modals
    // modal-enter-data
    function createTextBoxForEnterData(text, onClick, modal = "modal-enter-data") {
        $("#modal-text-enter").html(text);
        $("#modal-text-btn").unbind('click').click(function () {
            $("#" + modal).css("display", "none");
        });
        $("#modal-text-btn").click(onClick);
        $("#" + modal).css("display", "block");
    }

    function fileSystemOperationWithInput(path) {
        var input = $("#modal-text-text").val().trim();
        if (input.length === 0)
            return;
        ajaxPost(path, { path: contextMenuTarget.attr("path"), fileName: input, id: @Model.ID },
            function (data) {
                if (data)
                    updateProjectTree();
                toastr["success"](data ? "Success" : "Failed");
            });
        $("#modal-text-text").val('');
    }

    function onAddNewFile(ev) {
         var input = $("#modal-text-text").val().trim();
         if (input.length === 0)
             return;
         ajaxPost("@Url.Action("CreateFile", "Project")", { name: input, projectID: @Model.ID },
             function (data) {
                 toastr["success"](data ? "Success" : "Failed");
                 if (data)
                     updateProjectTree();
            });
        $("#modal-text-text").val('');
    }

    function afterInit() {

        emptyWorkspace = '@Html.Raw(await viewRender.RenderToStringAsync("SitePartical/Workspace"))';

        toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }


        function onReloadMenus() {
            reHandlerContextMenus();
        }


        $(function () {

            $('.dropdown-submenu a.test').on("click", function (e) {
                var visible = $(this).next("ul").is(":visible");
                $(this).parent().parent().find("li ul").each(function () { $(this).css("display", "none"); });
                if (!visible)
                    $(this).next("ul").toggle();
                if ($(this).next("ul").length > 0) {
                    e.stopPropagation();
                    e.preventDefault();
                }
            });


            @Html.Raw(Model.FileSystemTree)

            var options = {
                data: fileSystemTree,
            };

            tree = $('#tree-solution').treeview(options);
            treeCreator(tree);

        });

        $(".menu-handler").contextmenu(function (event) {
            var cursor = [event.pageX, event.pageY];
            $(".context-menu-container").each(function () { $(this).css("display", "none"); });
            var contextMenu = $("#" + $(this).attr("menu"));
            if (contextMenu === null)
                return;
            contextMenu.css("display", "block");
            contextMenu.children(function () { $(this).css("display", "block"); });
            contextMenu.css("left", cursor[0]);
            contextMenu.css("top", cursor[1]);
        });
    }


    $(function () {
        var config = {
            settings: {
                showPopoutIcon: false,
            },
            content: [{
                type: 'row',
                content: [{
                    type: 'stack',
                    width: 20,
                    content: [{
                        type: 'component',
                        title: 'Solution',
                        isClosable: false,
                        componentState: { text: '@Html.Raw(await viewRender.RenderToStringAsync("SitePartical/SolutionPanel"))' },
                        componentName: 'window-component'
                    }, {
                            type: 'component',
                            isClosable: false,
                            componentState: { text: '@Html.Raw(await viewRender.RenderToStringAsync("SitePartical/BuildLog"))' },
                            componentName: 'window-component',
                            title: 'Build log'
                        }, {
                            type: 'component',
                            isClosable: false,
                            componentState: { text: '@Html.Raw(await viewRender.RenderToStringAsync("SitePartical/Carousel",
                                new RazorContextModel { Model = projectConfiguration.CarouselTypes, ViewRenderService = viewRender }))' },
                            title: 'Carousel',
                            componentName: 'window-component'
                        }
                    ]
                }, {
                        type: 'stack',
                        content: [{
                            title: 'Start',
                            componentState: { text: '@Html.Raw(await viewRender.RenderToStringAsync("SitePartical/Start"))' },
                            componentName: 'window-component',
                            isClosable: false,
                            type: 'component'
                        }]
                }]
            }]
        };

        dockLayouts = new window.GoldenLayout(config, ".window-in");

        dockLayouts.registerComponent('window-component', function (c, s) {
            c.getElement().append(s.text);
        });

        dockLayouts.initialised += afterInit();
        dockLayouts.init();
    });

    function compileProject(ev) {
    }

    function createElement(event) {
        alert('123');
    }

    function createElement(event, name) {
        var tg = contextMenuTarget;

        //actualEngine.addElement(event, types[name]);
    }

    function deleteAll(event) {

    }

    function createStart(event) {
        var cursor = [50,50];
        ajaxPost("@Url.Action("CreateNewElement", "Constructor")", { elementType : @((int)ElementType.Start) },
            function (data) {
                //addElement(data, cursor);
            }
        );
    }

</script>
