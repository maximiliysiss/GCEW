@{
    ViewData["Title"] = "Home Page";
    var templatesSite = SiteTemplate<TemplateSite>.Instance();
    IViewRenderService viewRender = ViewBag.RenderEngine;
}
@model Project


<style>

    .context-menu-container {
        display: block;
    }

    line {
        background-image: url("~/images/arrows.png");
        background-repeat: repeat;
    }

    .st0 {
    }

    line:hover {
        cursor: pointer;
    }

    .badge {
        display: none;
    }

    .panel-compiler {
        height: 34px;
        padding-right: 20px;
        margin: 5px;
        display: flex;
        flex-direction: row-reverse;
    }

        .panel-compiler > button {
            margin-left: 10px;
            font-weight: bold;
        }
</style>
<div class="window">
    <div class="menu">
        @Html.Raw(Html.MenuContainerHtml())
    </div>
    <div class="panel-compiler">
        <button onclick="compileProject(event)" class="btn btn-success">Compile</button>
        <button class="btn btn-warning">Build</button>
    </div>


    @Html.Raw(Html.GenerateContextMenus())

    <div class="window-in">
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
<script src="~/lib/jquery-ui-1.12.1.custom/jquery-ui.js"></script>
<script src="~/js/context-menu-custom.js"></script>
<script src="~/js/FlowchartsVisual.js"></script>
<script src="~/lib/toastr/toastr.js"></script>
<script src="https://unpkg.com/micromodal/dist/micromodal.min.js"></script>
<script src="~/lib/patternfly-bootstrap-treeview-master/src/js/bootstrap-treeview.js"></script>
<script src="~/js/custom-modal-window.js"></script>
<script type="text/javascript" src="~/lib/goldenLayout/dist/goldenlayout.min.js"></script>
<script src="~/lib/leader-line-master/leader-line.min.js"></script>
<script>

    var tree;
    var dockLayouts;

    function createNewProject(event) {
        $("#new-project-form").submit();
    }

    function updateProjectTree() {
        ajaxPost("@Url.Action("ProjectTree", "Project")", { id: @Model.ID}, function (data) {
            var options = {
                data: JSON.parse(data),
            };

            var tree = $('#tree-solution').treeview(options);
            treeCreator(tree);
        });
    }

    $(document).on('keydown', function (e) {
        if (e.ctrlKey && e.which === 83) { // Check for the Ctrl key being pressed, and if the key = [S] (83)

            e.preventDefault();
            return false;
        }
    });

    function treeCreator(tree) {
        $(tree).on("rendered", function (e, n) {
            var size = Object.getOwnPropertyNames(n).length;
            for (var i = 0; i < size; i++) {
                var tagNumber = "[data-nodeid*='" + n[i].nodeId + "']";
                n[i].tags.forEach(function (tag) {
                    switch (tag) {
                        case "folder":
                            $(tagNumber).attr("menu", "MenuFolder");
                            break;
                        case "file":
                            $(tagNumber).attr("menu", "MenuFile");
                            break;
                    }
                });
                if (!$(tagNumber).attr("menu"))
                    $(tagNumber).attr("menu", "MenuFileRoot");
                $(tagNumber).attr("path", n[i].tags[1]);
            }

            reHandlerContextMenus();
        });
    }

    // List of modals
    // modal-enter-data
    function createTextBoxForEnterData(text, onClick, modal = "modal-enter-data") {
        $("#modal-text-enter").html(text);
        $("#modal-text-btn").unbind('click').click(function () {
            $("#" + modal).css("display", "none");
        });
        $("#modal-text-btn").click(onClick);
        $("#" + modal).css("display", "block");
    }

    function deleteFile(event) {
        ajaxPost("@Url.Action("DeleteFile", "Project")", { name: contextMenuTarget.attr("path") }, function (data) {
            if (data)
                updateProjectTree();
            toastr["success"](data ? "Success" : "Failed");
        });
    }

    function deleteFolder(event) {
        ajaxPost("@Url.Action("DeleteFolder", "Project")", { name: contextMenuTarget.attr("path") }, function (data) {
            if (data)
                updateProjectTree();
            toastr["success"](data ? "Success" : "Failed");
        });
    }

    function onAddNewFileInFolder(ev) {
        fileSystemOperationWithInput("@Url.Action("CreateFileInFolder", "Project")");
    }

    function onAddFolder(ev) {
        fileSystemOperationWithInput("@Url.Action("AddNewFolder", "Project")");
    }

    function addFolder(event) {
        createTextBoxForEnterData("Enter folder name", onAddFolder);
    }

    function addFraphicFile(event) {
        createTextBoxForEnterData("Enter filename", onAddNewFileInFolder);
    }

    function fileSystemOperationWithInput(path) {
        var input = $("#modal-text-text").val().trim();
        if (input.length === 0)
            return;
        ajaxPost(path, { path: contextMenuTarget.attr("path"), fileName: input, id: @Model.ID },
            function (data) {
                if (data)
                    updateProjectTree();
                toastr["success"](data ? "Success" : "Failed");
            });
        $("#modal-text-text").val('');
    }

    function onAddNewFile(ev) {
         var input = $("#modal-text-text").val().trim();
         if (input.length === 0)
             return;
         ajaxPost("@Url.Action("CreateFile", "Project")", { name: input, projectID: @Model.ID },
             function (data) {
                 toastr["success"](data ? "Success" : "Failed");
                 if (data)
                     updateProjectTree();
            });
        $("#modal-text-text").val('');
    }


    function addNewFile(event) {
        createTextBoxForEnterData("Enter name", onAddNewFile);
    }

    function afterInit() {

        toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }


        function onReloadMenus() {
            reHandlerContextMenus();
            reloadElements();
        }


        $(function () {


            initFlowChartsOnPage($("#svgOne"), onReloadMenus);

            $('.dropdown-submenu a.test').on("click", function (e) {
                var visible = $(this).next("ul").is(":visible");
                $(this).parent().parent().find("li ul").each(function () { $(this).css("display", "none"); });
                if (!visible)
                    $(this).next("ul").toggle();
                if ($(this).next("ul").length > 0) {
                    e.stopPropagation();
                    e.preventDefault();
                }
            });


            @Html.Raw(Model.FileSystemTree)

            var options = {
                data: fileSystemTree,
            };

            tree = $('#tree-solution').treeview(options);
            treeCreator(tree);

        });

        $(".menu-handler").contextmenu(function (event) {
            var cursor = [event.pageX, event.pageY];
            $(".context-menu-container").each(function () { $(this).css("display", "none"); });
            var contextMenu = $("#" + $(this).attr("menu"));
            if (contextMenu === null)
                return;
            contextMenu.css("display", "block");
            contextMenu.children(function () { $(this).css("display", "block"); });
            contextMenu.css("left", cursor[0]);
            contextMenu.css("top", cursor[1]);
        });
    }


    $(function () {

        var config = {
            settings: {
                showPopoutIcon: false
            },
            content: [{
                type: 'row',
                content: [{
                    type: 'stack',
                    width: 20,
                    content: [{
                        type: 'component',
                        isClosable: false,
                        componentName: 'Solution'
                    }, {
                        type: 'component',
                        isClosable: false,
                        componentName: 'Build log'
                    }
                    ]
                }, {
                    type: 'column',
                        content: [{
                        type: 'component',
                        componentName: 'workDocument'
                    }]
                }]
            }]
        };

        dockLayouts = new window.GoldenLayout(config, ".window-in");

        dockLayouts.registerComponent('Solution', function (c, s) {
            c.getElement().append(
                '@Html.Raw(await viewRender.RenderToStringAsync("SitePartical/SolutionPanel"))'
            );
        });
        dockLayouts.registerComponent('workDocument', function (c, s) {
            c.getElement().append(
                '@Html.Raw(await viewRender.RenderToStringAsync("SitePartical/Workspace"))'
            );
        });
        dockLayouts.registerComponent('Build log', function (c, s) {
            c.getElement().append(
                '@Html.Raw(await viewRender.RenderToStringAsync("SitePartical/BuildLog"))'
            );
        });

        dockLayouts.initialised += afterInit();
        dockLayouts.init();

    });


    function deleteElement(event) {
        console.log(contextMenuTarget.attr("id"));
        removeElementWithChains(contextMenuTarget);
        $(contextMenuTarget).remove();
    }

    function deleteAll(event) {
        $(".dragElement").each(function () {
            removeElementWithChains(this);
            $(this).remove();
        });
    }

    function ajaxPost(method, data, success) {
        $.ajax({
            url: method,
            method: "POST",
            data: data,
            success: success,
            error: function () {
                toastr["error"]("Error " + method);
            }
        });
    }

    function createElement(type, event) {
        var cursor = [event.pageX - flowChartPosition.left, event.pageY - flowChartPosition.top];
        ajaxPost("@Url.Action("CreateNewElement", "Constructor")", { elementType : type },
            function (data) {
                addElement(data, cursor);
            }
        );
    }

    function compileProject(ev) {
        lines.forEach(function (elem, i) {
            console.log($(elem.start).html() + " " + $(elem.end).html());
        });
    }

    function createVariable(event) {
        createElement(@((int)ElementType.Variable), event);
    }

    function createAddiction(event) {
        createElement(@((int)ElementType.Addition), event);
    }

    function createSubstract(event) {
        createElement(@((int)ElementType.Substract), event);
    }

    function createDivide(event) {
        createElement(@((int)ElementType.Divide), event);
    }

    function createMultyply(event) {
        createElement(@((int)ElementType.Multiply), event);
    }

    function createEqual(event) {
        createElement(@((int)ElementType.Equal), event);
    }

    function createLower(event) {
        createElement(@((int)ElementType.Lower), event);
    }

    function createGreater(event) {
        createElement(@((int)ElementType.Greater), event);
    }

     function createPrint(event) {
        createElement(@((int)ElementType.Print), event);
    }

</script>
